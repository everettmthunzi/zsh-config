#!/bin/zsh

# helper functions ------------------------------------------------------------

function backup_dotfiles() {
    if [ -d "$BACKUP_PATH/" ]; then
        rm -Rf "$BACKUP_PATH/"
    fi

    mkdir "$BACKUP_PATH/"

    if ! tr <"$DOTFILES_LIST" ' ' _ |
        xargs -n1 -I {} mv "$HOME/"{} "$BACKUP_PATH/"; then
            printf "\n-- backing up current dotfiles failed! \n"
    fi
}

function update_dotfiles() {
    if tr <"$DOTFILES_LIST" ' ' _ |
        xargs -n1 -I {} cp -R "$DOTFILES_PATH/"{} "$HOME/"; then
        else
            printf "-- dotfiles update failed! \n"
    fi
    cp $DOTFILES_PATH/init.vim $NEOVIM_CONFIG_PATH
}

#  # source_dotfiles widget
#  function source_dotfiles() {
#      if backup_dotfiles && update_dotfiles; then
#          source $HOME/.zshrc &>/dev/null </dev/tty
#      fi
#      zle accept-line
#  }
#  zle -N source_dotfiles
# source dotfiles using [`] in normal & insert mode
# bindkey -M viins "\`" source_dotfiles
# bindkey -M vicmd "\`" source_dotfiles


# open terminal with [CTRL-e]
bindkey '^e' edit-command-line
autoload edit-command-line
zle -N edit-command-line


## findhome ()
#    fzf find from home.
function findhome() {
    local dir
    dir=$(fd . "$HOME" --type d --hidden --follow --exclude ".git" -j8 | fzf +m) && cd "$dir" || return
    zle accept-line
}
zle -N findhome
bindkey -M vicmd "/" findhome


## findgit ()
#    Constrains fzf to git repo in insider one
function findgit() {

    # clear previous line contents
    zle kill-whole-line

    local dir
    local location

    # is path a git repo?
    location=$(git rev-parse --show-toplevel 2>/dev/null)
    if [[ -z "${location// }" ]]; then

        # iff not, run global search from home
        dir=$(fd . "$HOME" --type d --hidden --follow --exclude ".git" -j8 | fzf +m) && cd "$dir" || return
        zle accept-line
    else

        # iff yes, constrain search to git repo
        dir=$(fd --full-path "$(fuzzy.sh)" "$HOME" --type d --hidden --follow --exclude ".git" -j8 | fzf +m) && cd "$dir" || return
        zle accept-line
    fi

    # is dir valid?
    if [[ -z "${dir// }" ]]; then
        # iff not, exit and remain in vi cmd mode
        zle vi-cmd-mode
    fi
}
zle -N findgit
bindkey -M vicmd ";" findgit


# findfile ()
#   Finds and open file.
function findfile() {

    # clear previous line contents
    zle kill-whole-line

    local dir
    local file

    # is dir a git repo?
    dir=$(git rev-parse --show-toplevel 2>/dev/null)
    if [[ -z "${dir// }" ]]; then

        # iff not, run global search from home
        file=$(
        fd --full-path "$HOME" --type f --hidden --follow --exclude ".git" -j8 | fzf \
            --height 25 \
            --preview 'bat --style=numbers --color=always --line-range :20 {}'
        )
    else

        # iff yes, constrain search to git repo
        file=$(
        fd --full-path "$(git rev-parse --show-toplevel 2>/dev/null)" --type f --hidden --follow --exclude ".git" -j8 | fzf \
            --height 25 \
            --preview 'bat --style=numbers --color=always --line-range :20 {}'
        )
    fi

    # is file valid?
    if [[ -z "${file// }" ]]; then
        # iff not, exit and remain in vi cmd mode
        zle vi-cmd-mode
    else

        # iff yes, open file
        if [ -n "${file}" ]; then
            nvim "$file" </dev/tty || vim "$file" </dev/tty
        fi
    fi
}
zle -N findfile
bindkey -M vicmd "'" findfile


# exit terminal
function quit() {
    exit
    zle accept-line
}
zle -N quit
bindkey -M vicmd 'q' quit


# VIM movement keys
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
